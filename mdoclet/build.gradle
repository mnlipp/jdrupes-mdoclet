/*
 * JDrupes MDoclet
 * Copyright (C) 2017  Michael N. Lipp
 * 
 * This program is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; either version 3 of the License, or 
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 * 
 * You should have received a copy of the GNU General Public License along 
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'java-library'
apply plugin: 'signing'
apply plugin: 'maven-publish'

sourceCompatibility = '11'

dependencies {
    api libs.markdown

    testImplementation group: 'org.jsoup', name: 'jsoup', version: '1.8.3'
}

java {
    modularity.inferModulePath = true
}

compileJava {
    options.compilerArgs << '--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED'
}

archivesBaseName = "doclet"

// Configure sensible layout
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
}

task java11doc(type: JavaExec) {
    dependsOn classes
    inputs.file "overview.md"

    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED']
    classpath sourceSets.main.compileClasspath
    classpath files(tasks.jar)
    
    main = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', 'JDrupes MDoclet',
        '-use',
        '-linksource',
        '-link', 'https://docs.oracle.com/en/java/javase/11/docs/api/',
        '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '-doclet', 'org.jdrupes.mdoclet.MDoclet',
        '--disable-auto-highlight',
        '-overview', 'overview.md',
        '-d', '../../jdrupes-mdoclet.gh-pages/javadoc.jdk9/',
        '-sourcepath', 'src/',
        '-subpackages', 'org.jdrupes.mdoclet',
        '-bottom', file("misc/javadoc.bottom.txt").text,
        '--allow-script-in-comments',
        '-Xdoclint:-html'
        ]
    
    ignoreExitValue true
    
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

task javadocJar(type: Jar) {
    from javadoc.destinationDir
    classifier "javadoc"
}

// MavenPublishing

publishing {

    repositories {
        maven {
            name "snapshot"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username project.properties['sonatypeUsername'] ?: "nouser"
                password project.properties['sonatypePassword'] ?: "nopass"
            }
        }
        maven {
            name "release"
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username project.properties['sonatypeUsername'] ?: "nouser"
                password project.properties['sonatypePassword'] ?: "nopass"
            }
        }
    }

}

// Additional configuration of publishing
apply plugin: ConfigurePublishing

configurePublishing {
    withPomXml {
        asNode().with {
            appendNode('url', 'https://github.com/mnlipp/jdrupes-mdoclet')
            appendNode('scm').with {
                appendNode('url', 'scm:git@github.com:mnlipp/jdrupes-mdoclet.git')
                appendNode('connection', 'scm:git@github.com:mnlipp/jdrupes-mdoclet.git')
                appendNode('developerConnection', 'git@github.com:mnlipp/jdrupes-mdoclet.git')
            }
            appendNode('licenses').with {
                appendNode('license').with {
                    appendNode('name', 'AGPL 3.0')
                    appendNode('url', 'https://www.gnu.org/licenses/gpl-3.0.en.html')
                    appendNode('distribution', 'repo')
                }
            }
            appendNode('developers').with {
                appendNode('developer').with {
                    appendNode('id', 'mnlipp')
                    appendNode('name', 'Michael N. Lipp')
                }
            }
        }
    }
}

eclipse {
    classpath {
        file {
            withXml {
                def classpath = it.asNode()
                classpath.children().each { entry ->
                    if (entry.attribute('path').startsWith(
                        'org.eclipse.jdt.launching.JRE_CONTAINER/')) {
                        def attrs = entry.appendNode('attributes')
                        // 
                        def attr = attrs.appendNode('attribute')
                        attr.attributes().put('name', 'module')
                        attr.attributes().put('value', 'true')
                        attr = attrs.appendNode('attribute')
                        attr.attributes().put('name', 'add-exports') 
                        attr.attributes().put('value', 
                            'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED')
                    }
                }
            }
        }
    }
}
